// ========================================
// CONFIGURA√á√ïES DO SISTEMA DE REDIRECIONAMENTO
// ========================================

// üî¥ META ADS PIXEL
const META_PIXEL_ID = '1242065550945306';

// üî¥ SUPABASE - CONFIGURA√á√ïES DO BANCO
// ‚ö†Ô∏è ALTERE ESTAS CREDENCIAIS COM SUAS INFORMA√á√ïES REAIS
const SUPABASE_URL = 'https://faadgeevxgrzcpgpxnkw.supabase.co'; // ‚Üê COLE SUA URL REAL AQUI
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZhYWRnZWV2eGdyemNwZ3B4bmt3Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTQ3MzYxMiwiZXhwIjoyMDcxMDQ5NjEyfQ.A6jclfrrSU_onzxIeQrSy8DToh5Vrx1WZrONkrviEvA'; // ‚Üê COLE SUA CHAVE AN√îNIMA REAL AQUI

// üî¥ WHATSAPP - CONFIGURA√á√ïES
const WHATSAPP_FALLBACK = '5535991712235'; // ‚Üê ALTERE AQUI
const BASE_MESSAGE = 'Ol√°! Quero receber os materiais! Cupom: ';

// üîó WEBHOOK - CONFIGURA√á√ïES
const PREHOOK_URL = 'https://webhook.servidorrrdigital.site/webhook/redirect';

// ‚öôÔ∏è CONFIGURA√á√ïES AVAN√áADAS
const REDIRECT_DELAY = 5000;
const DEDUPE_TTL_MS = 5 * 60 * 1000; // 5 min
const WEBHOOK_RETRY_DELAY = 2000;
const MAX_WEBHOOK_RETRIES = 5;
const IP_TIMEOUT = 8000;
const GEO_TIMEOUT = 10000;

// ========================================
// EXPOSI√á√ÉO DAS VARI√ÅVEIS GLOBAIS
// ========================================

// ‚ö†Ô∏è IMPORTANTE: Estas vari√°veis devem estar dispon√≠veis globalmente
window.META_PIXEL_ID = META_PIXEL_ID;
window.SUPABASE_URL = SUPABASE_URL;
window.SUPABASE_ANON_KEY = SUPABASE_ANON_KEY;
window.WHATSAPP_FALLBACK = WHATSAPP_FALLBACK;
window.BASE_MESSAGE = BASE_MESSAGE;
window.PREHOOK_URL = PREHOOK_URL;
window.REDIRECT_DELAY = REDIRECT_DELAY;
window.DEDUPE_TTL_MS = DEDUPE_TTL_MS;
window.WEBHOOK_RETRY_DELAY = WEBHOOK_RETRY_DELAY;
window.MAX_WEBHOOK_RETRIES = MAX_WEBHOOK_RETRIES;
window.IP_TIMEOUT = IP_TIMEOUT;
window.GEO_TIMEOUT = GEO_TIMEOUT;

// ========================================
// SISTEMA DE CONFIGURA√á√ÉO NO SUPABASE
// ========================================

// Cache local das configura√ß√µes
let configCache = {};
let configCacheExpiry = 0;
const CACHE_TTL_MS = 5 * 60 * 1000; // 5 minutos

// Fun√ß√£o para obter configura√ß√£o do Supabase
async function getConfigFromSupabase(key, defaultValue) {
  try {
    // Verifica cache primeiro
    if (configCache[key] && Date.now() < configCacheExpiry) {
      // Configura√ß√£o carregada do cache
      return configCache[key];
    }

    // Busca no Supabase
    const response = await fetch(`${SUPABASE_URL}/rest/v1/system_config?config_key=eq.${encodeURIComponent(key)}`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      const data = await response.json();
      
      if (data && data.length > 0) {
        const configValue = data[0].config_value;
        
        // Atualiza cache
        configCache[key] = configValue;
        configCacheExpiry = Date.now() + CACHE_TTL_MS;
        
        // Configura√ß√£o carregada do Supabase
        return configValue;
      }
    }
  } catch (error) {
    // Erro ao buscar configura√ß√£o no Supabase
  }

  // Fallback para localStorage
  try {
    const localValue = localStorage.getItem(`config_${key}`);
    if (localValue) {
      // Configura√ß√£o carregada do localStorage
      return localValue;
    }
  } catch (e) {
    // localStorage n√£o dispon√≠vel
  }

  // Usa valor padr√£o
  // Usando valor padr√£o
  return defaultValue;
}

// Fun√ß√£o para obter configura√ß√£o com fallback
async function getConfig(key, defaultValue) {
  // 1. Tenta vari√°vel de ambiente (produ√ß√£o)
  if (typeof process !== 'undefined' && process.env && process.env[key]) {
    // Configura√ß√£o carregada via vari√°vel de ambiente
    return process.env[key];
  }
  
  // 2. Tenta Supabase (com cache)
  const supabaseValue = await getConfigFromSupabase(key, defaultValue);
  if (supabaseValue !== defaultValue) {
    return supabaseValue;
  }
  
  // 3. Usa valor padr√£o
  return defaultValue;
}

// Configura√ß√µes com sistema de fallback
const SYSTEM_CONFIG = {
  META_PIXEL_ID: getConfig('META_PIXEL_ID', META_PIXEL_ID),
  SUPABASE_URL: getConfig('SUPABASE_URL', SUPABASE_URL),
  SUPABASE_ANON_KEY: getConfig('SUPABASE_ANON_KEY', SUPABASE_ANON_KEY),
  WHATSAPP_FALLBACK: getConfig('WHATSAPP_FALLBACK', WHATSAPP_FALLBACK),
  BASE_MESSAGE: getConfig('BASE_MESSAGE', BASE_MESSAGE),
  PREHOOK_URL: getConfig('PREHOOK_URL', PREHOOK_URL),
  REDIRECT_DELAY: getConfig('REDIRECT_DELAY', REDIRECT_DELAY),
  DEDUPE_TTL_MS: getConfig('DEDUPE_TTL_MS', DEDUPE_TTL_MS),
  WEBHOOK_RETRY_DELAY: getConfig('WEBHOOK_RETRY_DELAY', WEBHOOK_RETRY_DELAY),
  MAX_WEBHOOK_RETRIES: getConfig('MAX_WEBHOOK_RETRIES', MAX_WEBHOOK_RETRIES),
  IP_TIMEOUT: getConfig('IP_TIMEOUT', IP_TIMEOUT),
  GEO_TIMEOUT: getConfig('GEO_TIMEOUT', GEO_TIMEOUT)
};

// Exporta as configura√ß√µes
window.SYSTEM_CONFIG = SYSTEM_CONFIG;

// ========================================
// FUN√á√ïES DE CONFIGURA√á√ÉO DIN√ÇMICA
// ========================================

// Fun√ß√£o para atualizar configura√ß√£o em tempo real
window.updateConfig = async function(key, value) {
  try {
    // Atualiza no Supabase (se poss√≠vel)
    if (SUPABASE_URL && SUPABASE_ANON_KEY && SUPABASE_URL !== 'https://your-project.supabase.co') {
      try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/system_config?config_key=eq.${encodeURIComponent(key)}`, {
          method: 'PATCH',
          headers: {
            'apikey': SUPABASE_ANON_KEY,
            'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
            'Content-Type': 'application/json',
            'Prefer': 'return=minimal'
          },
          body: JSON.stringify({
            config_value: value,
            updated_at: new Date().toISOString()
          })
        });

        if (response.ok) {
          // Configura√ß√£o atualizada no Supabase
          
          // Atualiza cache
          configCache[key] = value;
          configCacheExpiry = Date.now() + CACHE_TTL_MS;
        } else {
          // Falha ao atualizar no Supabase, usando localStorage
          // Fallback para localStorage
          localStorage.setItem(`config_${key}`, value);
        }
      } catch (supabaseError) {
        // Erro no Supabase, usando localStorage
        localStorage.setItem(`config_${key}`, value);
      }
    } else {
      // Supabase n√£o configurado, usa localStorage
      localStorage.setItem(`config_${key}`, value);
    }
    
    // Atualiza configura√ß√£o atual
    window.SYSTEM_CONFIG[key] = value;
    
    // Configura√ß√£o atualizada
    return true;
  } catch (error) {
    // Erro ao atualizar configura√ß√£o
    return false;
  }
};

// Fun√ß√£o para listar todas as configura√ß√µes
window.listConfig = function() {
  // Listando configura√ß√µes atuais
  return window.SYSTEM_CONFIG;
};

// Fun√ß√£o para carregar todas as configura√ß√µes do Supabase
window.loadAllConfigFromSupabase = async function() {
  try {
    if (!SUPABASE_URL || !SUPABASE_ANON_KEY || SUPABASE_URL === 'https://your-project.supabase.co') {
      // Supabase n√£o configurado
      return false;
    }

    // Carregando configura√ß√µes do Supabase
    
    const response = await fetch(`${SUPABASE_URL}/rest/v1/system_config?select=config_key,config_value,description,is_sensitive&order=config_key.asc`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      const configs = await response.json();
      
      // Atualiza cache e configura√ß√µes
      configs.forEach(config => {
        configCache[config.config_key] = config.config_value;
        window.SYSTEM_CONFIG[config.config_key] = config.config_value;
      });
      
      configCacheExpiry = Date.now() + CACHE_TTL_MS;
      
      // Configura√ß√µes carregadas do Supabase
      return true;
    } else {
      // Erro ao carregar configura√ß√µes do Supabase
      return false;
    }
  } catch (error) {
    // Erro ao carregar configura√ß√µes do Supabase
    return false;
  }
};

// Fun√ß√£o para sincronizar configura√ß√µes
window.syncConfig = async function() {
  // Sincronizando configura√ß√µes
  
  // Limpa cache
  configCache = {};
  configCacheExpiry = 0;
  
  // Recarrega do Supabase
  const success = await window.loadAllConfigFromSupabase();
  
  if (success) {
    // Configura√ß√µes sincronizadas com sucesso
  } else {
    // Usando configura√ß√µes locais como fallback
  }
  
  return success;
};

// Fun√ß√£o para resetar configura√ß√µes para valores padr√£o
window.resetConfig = async function() {
  try {
    // Resetando configura√ß√µes
    
    // Remove todas as configura√ß√µes do localStorage
    Object.keys(window.SYSTEM_CONFIG).forEach(key => {
      localStorage.removeItem(`config_${key}`);
    });
    
    // Limpa cache
    configCache = {};
    configCacheExpiry = 0;
    
    // Se Supabase estiver configurado, tenta resetar l√° tamb√©m
    if (SUPABASE_URL && SUPABASE_ANON_KEY && SUPABASE_URL !== 'https://your-project.supabase.co') {
      try {
        // Busca configura√ß√µes padr√£o do arquivo
        const defaultConfigs = {
          'META_PIXEL_ID': '1722654601715514',
          'SUPABASE_URL': SUPABASE_URL,
          'SUPABASE_ANON_KEY': SUPABASE_ANON_KEY,
          'WHATSAPP_FALLBACK': '5511999999999',
          'BASE_MESSAGE': 'Ol√°! Quero receber os materiais! Cupom: ',
          'PREHOOK_URL': 'https://n8n.granapdf.com/webhook/redirect',
          'REDIRECT_DELAY': '5000',
          'DEDUPE_TTL_MS': '300000',
          'WEBHOOK_RETRY_DELAY': '2000',
          'MAX_WEBHOOK_RETRIES': '5',
          'IP_TIMEOUT': '8000',
          'GEO_TIMEOUT': '10000'
        };
        
        // Atualiza cada configura√ß√£o no Supabase
        for (const [key, value] of Object.entries(defaultConfigs)) {
          try {
            await fetch(`${SUPABASE_URL}/rest/v1/system_config?config_key=eq.${encodeURIComponent(key)}`, {
              method: 'PATCH',
              headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'Content-Type': 'application/json',
                'Prefer': 'return=minimal'
              },
              body: JSON.stringify({
                config_value: value,
                updated_at: new Date().toISOString()
              })
            });
          } catch (updateError) {
            // Erro ao resetar no Supabase
          }
        }
        
        // Configura√ß√µes resetadas no Supabase
      } catch (supabaseError) {
        // Erro ao resetar no Supabase
      }
    }
    
    // Recarrega a p√°gina para aplicar valores padr√£o
    // Recarregando p√°gina
    setTimeout(() => location.reload(), 1000);
    
    return true;
  } catch (error) {
    // Erro ao resetar configura√ß√µes
    return false;
  }
};

// ========================================
// VERIFICA√á√ÉO DE CONFIGURA√á√ÉO
// ========================================

// Verifica se as configura√ß√µes cr√≠ticas est√£o definidas
function validateConfig() {
  const criticalKeys = ['SUPABASE_URL', 'SUPABASE_ANON_KEY'];
  const missingKeys = criticalKeys.filter(key => {
    const value = window.SYSTEM_CONFIG[key];
    return !value || value === 'your-project.supabase.co' || value === 'your-anon-key';
  });
  
  if (missingKeys.length > 0) {
    // Configura√ß√µes cr√≠ticas n√£o definidas
    return false;
  }
  
  // Todas as configura√ß√µes cr√≠ticas est√£o definidas
  return true;
}

// Executa valida√ß√£o
validateConfig();

// Carrega configura√ß√µes do Supabase automaticamente
(async function() {
  try {
    await window.loadAllConfigFromSupabase();
    // Configura√ß√µes carregadas do Supabase
  } catch (error) {
    // Usando configura√ß√µes padr√£o
  }
})();

// Configura√ß√µes carregadas - use window.updateConfig(), listConfig(), loadAllConfigFromSupabase(), syncConfig() ou resetConfig()
